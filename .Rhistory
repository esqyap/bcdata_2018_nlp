chat_sessions[, Chat := tolower(Chat)]
# tokenize
chat_sessions_filtered <- chat_sessions %>%
unnest_tokens(word, Chat) %>%
anti_join(stop_words) %>%
anti_join(firstnames, by = "firstnames") %>%
distinct() %>%
filter(nchar(word) > 3)
View(firstnames)
chat_sessions <- fread("data/merge_files3.txt", sep = "\t")
# create list of first names that can be removed when filtering
firstnames <- c(unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Agent\\][^\\s]+"))),
unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Visitor\\][^:]+"))))
# remove NA
firstnames <- firstnames[!is.na(firstnames)]
# remove trailing spaces
firstnames <- str_trim(firstnames)
# remove Agent/Visitor
firstnames <- gsub("\\[Agent\\]|\\[Visitor\\]", "", firstnames)
firstnames <- gsub("^[[:punct:]]", "", firstnames)
# remove empty elements
firstnames <- firstnames[firstnames != ""]
# make lowercase
firstnames <- tolower(firstnames)
# make data.frame
firstnames <- data.frame(firstnames)
colnames(firstnames) <- "word"
# fix contractions
chat_sessions[, Chat := gsub("won't", "will not", Chat)]
chat_sessions[, Chat := gsub("can't", "can not", Chat)]
chat_sessions[, Chat := gsub("n't", " not", Chat)]
chat_sessions[, Chat := gsub("'ll", " will", Chat)]
chat_sessions[, Chat := gsub("'re", " are", Chat)]
chat_sessions[, Chat := gsub("'ve", " have", Chat)]
chat_sessions[, Chat := gsub("'m", " am", Chat)]
chat_sessions[, Chat := gsub("'d", " would", Chat)]
chat_sessions[, Chat := gsub("'s", "", Chat)]
chat_sessions[, Chat := gsub("s'", "s", Chat)]
# remove undesirable words
chat_sessions[, Chat := gsub("has left the chat", "", Chat)]
chat_sessions[, Chat := gsub("comm100", "", Chat, ignore.case = T)]
# remove agent and visitor and punctuation
chat_sessions[, Chat := gsub("\\[Agent\\][^:]+|\\[Visitor\\][^:]+|[[:punct:]]|[[:digit:]]", "", Chat)]
# change to lowercase
chat_sessions[, Chat := tolower(Chat)]
# tokenize
chat_sessions_filtered <- chat_sessions %>%
unnest_tokens(word, Chat) %>%
anti_join(stop_words) %>%
anti_join(firstnames) %>%
distinct() %>%
filter(nchar(word) > 3)
View(chat_sessions_filtered)
chat_sessions_filtered <- data.table(chat_sessions_filtered)
# what does the data frame looks like?
dim(chat_sessions_filtered)
# what does the data frame looks like?
dim(chat_sessions_filtered)[1]
chat_sessions_filtered[, length(unique(ID)]
chat_sessions_filtered[, length(unique(ID))]
fail_filter <- chat_sessions[!(ID %in% chat_sessions_filtered[, unique(ID)])]
fail_filter[2]
fail_filter[3]
chat_sessions[ID == 1045]
View(fail_filter)
word_frequency <- chat_sessions_filtered[, .N, by = "ID"]
View(word_frequency)
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour="black", fill="white")
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour="black", fill="white") +
theme_bw()
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5) +
theme_bw()
library(RColorBrewer)
brewer.pal(11, "RdBu")
brewer.pal(11, "RdBu")[10]
geom_histogram(binwidth=.5, colour="brewer.pal(11, "RdBu")[10], fill="white") +
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw()
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 28),
axis.title = element_text(size = 30, face = "bold"))
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 28),
axis.title = element_text(size = 30, face = "bold")) +
ylab("Count") +
xlab("Word Frequency per Chat Session")
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 28),
axis.title = element_text(size = 30, face = "bold")) +
ylab("Count") +
xlab("Word Frequency per Chat Session") +
geom_vline(aes(xintercept=mean(word_frequency(,N), na.rm=T)),
color="red", linetype="dashed", size=1)
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 28),
axis.title = element_text(size = 30, face = "bold")) +
ylab("Count") +
xlab("Word Frequency per Chat Session") +
geom_vline(aes(xintercept=mean(word_frequency[ ,N], na.rm=T)),
color="red", linetype="dashed", size=1)
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 28),
axis.title = element_text(size = 30, face = "bold")) +
ylab("Count") +
xlab("Word Frequency per Chat Session") +
geom_vline(aes(xintercept=mean(word_frequency[ ,N], na.rm=T)),
color="red", linetype="dashed", size=1) +
scale_y_continuous(breaks = seq(0, 250, 20))
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 28),
axis.title = element_text(size = 30, face = "bold")) +
ylab("Count") +
xlab("Word Frequency per Chat Session") +
geom_vline(aes(xintercept=mean(word_frequency[ ,N], na.rm=T)),
color="red", linetype="dashed", size=1) +
scale_x_continuous(breaks = seq(0, 250, 20))
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 28),
axis.title = element_text(size = 30, face = "bold")) +
ylab("Count") +
xlab("Word Frequency per Chat Session") +
geom_vline(aes(xintercept=mean(word_frequency[ ,N], na.rm=T)),
color="red", linetype="dashed", size=1) +
scale_x_continuous(breaks = seq(0, 220, 20))
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 24),
axis.title = element_text(size = 28, face = "bold")) +
ylab("Count") +
xlab("Word Frequency per Chat Session") +
geom_vline(aes(xintercept=mean(word_frequency[ ,N], na.rm=T)),
color="red", linetype="dashed", size=1) +
scale_x_continuous(breaks = seq(0, 220, 20))
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 22),
axis.title = element_text(size = 24, face = "bold")) +
ylab("Count") +
xlab("Word Frequency per Chat Session") +
geom_vline(aes(xintercept=mean(word_frequency[ ,N], na.rm=T)),
color="red", linetype="dashed", size=1) +
scale_x_continuous(breaks = seq(0, 220, 20))
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 20),
axis.title = element_text(size = 24, face = "bold")) +
ylab("Count") +
xlab("Word Frequency per Chat Session") +
geom_vline(aes(xintercept=mean(word_frequency[ ,N], na.rm=T)),
color="red", linetype="dashed", size=1) +
scale_x_continuous(breaks = seq(0, 220, 20))
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 20),
axis.title = element_text(size = 24, face = "bold")) +
ylab("Count") +
xlab("Word Frequency per Chat Session") +
geom_vline(aes(xintercept=med(word_frequency[ ,N])),
color="red", linetype="dashed", size=1) +
scale_x_continuous(breaks = seq(0, 220, 20))
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 20),
axis.title = element_text(size = 24, face = "bold")) +
ylab("Count") +
xlab("Word Frequency per Chat Session") +
geom_vline(aes(xintercept=median(word_frequency[ ,N])),
color="red", linetype="dashed", size=1) +
scale_x_continuous(breaks = seq(0, 220, 20))
View(firstnames)
View(chat_sessions)
View(chat_sessions_filtered)
chat_sessions[ID == 100]
chat_sessions <- fread("data/merge_files3.txt", sep = "\t")
# create list of first names that can be removed when filtering
firstnames <- c(unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Agent\\][^\\s]+"))),
unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Visitor\\][^:]+"))))
# remove NA
firstnames <- firstnames[!is.na(firstnames)]
# remove trailing spaces
firstnames <- str_trim(firstnames)
# remove Agent/Visitor
firstnames <- gsub("\\[Agent\\]|\\[Visitor\\]", "", firstnames)
firstnames <- gsub("^[[:punct:]]", "", firstnames)
# remove empty elements
firstnames <- firstnames[firstnames != ""]
# make lowercase
firstnames <- tolower(firstnames)
# make data.frame
firstnames <- data.frame(firstnames)
colnames(firstnames) <- "word"
# fix contractions
chat_sessions[, Chat := gsub("won't", "will not", Chat)]
chat_sessions[, Chat := gsub("can't", "can not", Chat)]
chat_sessions[, Chat := gsub("n't", " not", Chat)]
chat_sessions[, Chat := gsub("'ll", " will", Chat)]
chat_sessions[, Chat := gsub("'re", " are", Chat)]
chat_sessions[, Chat := gsub("'ve", " have", Chat)]
chat_sessions[, Chat := gsub("'m", " am", Chat)]
chat_sessions[, Chat := gsub("'d", " would", Chat)]
chat_sessions[, Chat := gsub("'s", "", Chat)]
chat_sessions[, Chat := gsub("s'", "s", Chat)]
# remove undesirable words
chat_sessions[, Chat := gsub("has left the chat", "", Chat)]
chat_sessions[, Chat := gsub("comm100|Comm100", "", Chat, ignore.case = T)]
# remove agent and visitor and punctuation
chat_sessions[, Chat := gsub("\\[Agent\\][^:]+|\\[Visitor\\][^:]+|[[:punct:]]|[[:digit:]]", "", Chat)]
# chat_sessions[grep("[']", Chat)]
# change to lowercase
chat_sessions[, Chat := tolower(Chat)]
# tokenize
chat_sessions_filtered <- chat_sessions %>%
unnest_tokens(word, Chat) %>%
anti_join(stop_words) %>%
anti_join(firstnames) %>%
distinct() %>%
filter(nchar(word) > 3)
chat_sessions_filtered <- data.table(chat_sessions_filtered)
# what does the data frame looks like?
dim(chat_sessions_filtered)
View(chat_sessions_filtered)
chat_sessions <- fread("data/merge_files3.txt", sep = "\t")
# create list of first names that can be removed when filtering
firstnames <- c(unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Agent\\][^\\s]+"))),
unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Visitor\\][^:]+"))))
# remove NA
firstnames <- firstnames[!is.na(firstnames)]
# remove trailing spaces
firstnames <- str_trim(firstnames)
# remove Agent/Visitor
firstnames <- gsub("\\[Agent\\]|\\[Visitor\\]", "", firstnames)
firstnames <- gsub("^[[:punct:]]", "", firstnames)
# remove empty elements
firstnames <- firstnames[firstnames != ""]
# make lowercase
firstnames <- tolower(firstnames)
# make data.frame
firstnames <- data.frame(firstnames)
colnames(firstnames) <- "word"
# fix contractions
chat_sessions[, Chat := gsub("won't", "will not", Chat)]
chat_sessions[, Chat := gsub("can't", "can not", Chat)]
chat_sessions[, Chat := gsub("n't", " not", Chat)]
chat_sessions[, Chat := gsub("'ll", " will", Chat)]
chat_sessions[, Chat := gsub("'re", " are", Chat)]
chat_sessions[, Chat := gsub("'ve", " have", Chat)]
chat_sessions[, Chat := gsub("'m", " am", Chat)]
chat_sessions[, Chat := gsub("'d", " would", Chat)]
chat_sessions[, Chat := gsub("'s", "", Chat)]
chat_sessions[, Chat := gsub("s'", "s", Chat)]
# remove undesirable words
chat_sessions[, Chat := gsub("has left the chat", "", Chat)]
chat_sessions[, grep("comm100")]
chat_sessions[, grep("comm100", Chat)]
chat_sessions[grep("comm100", Chat)]
chat_sessions[, Chat := gsub("comm100", "", Chat, ignore.case = T)]
chat_sessions[ID == 1217]
chat_sessions[ID == 999]
View(chat_sessions)
chat_sessions[grep("comm100", ignore.case = T)]
chat_sessions[grep("comm100", Chat, ignore.case = T)]
# remove agent and visitor and punctuation
chat_sessions[, Chat := gsub("\\[Agent\\][^:]+|\\[Visitor\\][^:]+|[[:punct:]]|[[:digit:]]", "", Chat)]
# change to lowercase
chat_sessions[, Chat := tolower(Chat)]
chat_sessions[grep("comm100", Chat, ignore.case = T)]
# tokenize
chat_sessions_filtered <- chat_sessions %>%
unnest_tokens(word, Chat) %>%
anti_join(stop_words) %>%
anti_join(firstnames) %>%
distinct() %>%
filter(nchar(word) > 3)
chat_sessions_filtered[word %in% "comm"]
View(chat_sessions_filtered)
chat_sessions[ID == 1001]
# create list of first names that can be removed when filtering
firstnames <- c(unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Agent\\][^\\s]+"))),
unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Visitor\\][^:]+"))))
# remove NA
firstnames <- firstnames[!is.na(firstnames)]
# remove trailing spaces
firstnames <- str_trim(firstnames)
# remove Agent/Visitor
firstnames <- gsub("\\[Agent\\]|\\[Visitor\\]", "", firstnames)
firstnames <- gsub("^[[:punct:]]", "", firstnames)
# remove empty elements
firstnames <- firstnames[firstnames != ""]
# make lowercase
firstnames <- tolower(firstnames)
# make data.frame
firstnames <- data.frame(firstnames)
colnames(firstnames) <- "word"
# fix contractions
chat_sessions[, Chat := gsub("won't", "will not", Chat)]
chat_sessions[, Chat := gsub("can't", "can not", Chat)]
chat_sessions[, Chat := gsub("n't", " not", Chat)]
chat_sessions[, Chat := gsub("'ll", " will", Chat)]
chat_sessions[, Chat := gsub("'re", " are", Chat)]
chat_sessions[, Chat := gsub("'ve", " have", Chat)]
chat_sessions[, Chat := gsub("'m", " am", Chat)]
chat_sessions[, Chat := gsub("'d", " would", Chat)]
chat_sessions[, Chat := gsub("'s", "", Chat)]
chat_sessions[, Chat := gsub("s'", "s", Chat)]
# remove undesirable words
chat_sessions[, Chat := gsub("has left the chat", "", Chat)]
chat_sessions[, Chat := gsub("comm100|comm 100", "", Chat, ignore.case = T)]
# remove agent and visitor and punctuation
chat_sessions[, Chat := gsub("\\[Agent\\][^:]+|\\[Visitor\\][^:]+|[[:punct:]]|[[:digit:]]", "", Chat)]
# chat_sessions[grep("[']", Chat)]
# change to lowercase
chat_sessions[, Chat := tolower(Chat)]
chat_sessions <- fread("data/merge_files3.txt", sep = "\t")
# create list of first names that can be removed when filtering
firstnames <- c(unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Agent\\][^\\s]+"))),
unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Visitor\\][^:]+"))))
# remove NA
firstnames <- firstnames[!is.na(firstnames)]
# remove trailing spaces
firstnames <- str_trim(firstnames)
# remove Agent/Visitor
firstnames <- gsub("\\[Agent\\]|\\[Visitor\\]", "", firstnames)
firstnames <- gsub("^[[:punct:]]", "", firstnames)
# remove empty elements
firstnames <- firstnames[firstnames != ""]
# make lowercase
firstnames <- tolower(firstnames)
# make data.frame
firstnames <- data.frame(firstnames)
colnames(firstnames) <- "word"
# fix contractions
chat_sessions[, Chat := gsub("won't", "will not", Chat)]
chat_sessions[, Chat := gsub("can't", "can not", Chat)]
chat_sessions[, Chat := gsub("n't", " not", Chat)]
chat_sessions[, Chat := gsub("'ll", " will", Chat)]
chat_sessions[, Chat := gsub("'re", " are", Chat)]
chat_sessions[, Chat := gsub("'ve", " have", Chat)]
chat_sessions[, Chat := gsub("'m", " am", Chat)]
chat_sessions[, Chat := gsub("'d", " would", Chat)]
chat_sessions[, Chat := gsub("'s", "", Chat)]
chat_sessions[, Chat := gsub("s'", "s", Chat)]
# remove undesirable words
chat_sessions[, Chat := gsub("has left the chat", "", Chat)]
chat_sessions[, Chat := gsub("comm100|comm 100", "", Chat, ignore.case = T)]
# remove agent and visitor and punctuation
chat_sessions[, Chat := gsub("\\[Agent\\][^:]+|\\[Visitor\\][^:]+|[[:punct:]]|[[:digit:]]", "", Chat)]
# chat_sessions[grep("[']", Chat)]
# change to lowercase
chat_sessions[, Chat := tolower(Chat)]
# tokenize
chat_sessions_filtered <- chat_sessions %>%
unnest_tokens(word, Chat) %>%
anti_join(stop_words) %>%
anti_join(firstnames) %>%
distinct() %>%
filter(nchar(word) > 3)
chat_sessions_filtered <- data.table(chat_sessions_filtered)
# what does the data frame looks like?
dim(chat_sessions_filtered)
fail_filter <- chat_sessions[!(ID %in% chat_sessions_filtered[, unique(ID)])]
fail_filter[3]
word_frequency <- chat_sessions_filtered[, .N, by = "ID"]
View(chat_sessions_filtered)
x <- c("comm 100", "Comm100", "comm100")
grep("comm100|comm 100", x, ignore.case = T)
chat_sessions_filtered[word %in% "comm"]
chat_sessions <- fread("data/merge_files3.txt", sep = "\t")
# create list of first names that can be removed when filtering
firstnames <- c(unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Agent\\][^\\s]+"))),
unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Visitor\\][^:]+"))))
# remove NA
firstnames <- firstnames[!is.na(firstnames)]
# remove trailing spaces
firstnames <- str_trim(firstnames)
# remove Agent/Visitor
firstnames <- gsub("\\[Agent\\]|\\[Visitor\\]", "", firstnames)
firstnames <- gsub("^[[:punct:]]", "", firstnames)
# remove empty elements
firstnames <- firstnames[firstnames != ""]
# make lowercase
firstnames <- tolower(firstnames)
# make data.frame
firstnames <- data.frame(firstnames)
colnames(firstnames) <- "word"
# fix contractions
chat_sessions[, Chat := gsub("won't", "will not", Chat)]
chat_sessions[, Chat := gsub("can't", "can not", Chat)]
chat_sessions[, Chat := gsub("n't", " not", Chat)]
chat_sessions[, Chat := gsub("'ll", " will", Chat)]
chat_sessions[, Chat := gsub("'re", " are", Chat)]
chat_sessions[, Chat := gsub("'ve", " have", Chat)]
chat_sessions[, Chat := gsub("'m", " am", Chat)]
chat_sessions[, Chat := gsub("'d", " would", Chat)]
chat_sessions[, Chat := gsub("'s", "", Chat)]
chat_sessions[, Chat := gsub("s'", "s", Chat)]
# remove undesirable words
chat_sessions[, Chat := gsub("has left the chat", "", Chat)]
# remove agent and visitor and punctuation
chat_sessions[, Chat := gsub("\\[Agent\\][^:]+|\\[Visitor\\][^:]+|[[:punct:]]|[[:digit:]]", "", Chat)]
# chat_sessions[grep("[']", Chat)]
chat_sessions[, Chat := gsub("comm", "", Chat, ignore.case = T)]
# change to lowercase
chat_sessions[, Chat := tolower(Chat)]
# tokenize
chat_sessions_filtered <- chat_sessions %>%
unnest_tokens(word, Chat) %>%
anti_join(stop_words) %>%
anti_join(firstnames) %>%
distinct() %>%
filter(nchar(word) > 3)
chat_sessions_filtered <- data.table(chat_sessions_filtered)
# what does the data frame looks like?
dim(chat_sessions_filtered)
fail_filter <- chat_sessions[!(ID %in% chat_sessions_filtered[, unique(ID)])]
fail_filter[3]
View(chat_sessions_filtered)
word_frequency <- chat_sessions_filtered[, .N, by = "ID"]
ggplot(word_frequency, aes(x=N)) +
geom_histogram(binwidth=.5, colour=brewer.pal(11, "RdBu")[10], fill="white") +
theme_bw() +
theme(axis.text = element_text(size = 20),
axis.title = element_text(size = 24, face = "bold")) +
ylab("Count") +
xlab("Word Frequency per Chat Session") +
geom_vline(aes(xintercept=median(word_frequency[ ,N])),
color="red", linetype="dashed", size=1) +
scale_x_continuous(breaks = seq(0, 220, 20))
chat_sessions_filtered[, length(unique(ID)]
chat_sessions_filtered[, length(unique(ID))]
fail_filter[, head(Chat)]
chat_sessions <- fread("data/merge_files3.txt", sep = "\t")
# create list of first names that can be removed when filtering
firstnames <- c(unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Agent\\][^\\s]+"))),
unique(unlist(stri_extract_all_regex(chat_sessions[, Chat], "\\[Visitor\\][^:]+"))))
# remove NA
firstnames <- firstnames[!is.na(firstnames)]
# remove trailing spaces
firstnames <- str_trim(firstnames)
# remove Agent/Visitor
firstnames <- gsub("\\[Agent\\]|\\[Visitor\\]", "", firstnames)
firstnames <- gsub("^[[:punct:]]", "", firstnames)
# remove empty elements
firstnames <- firstnames[firstnames != ""]
# make lowercase
firstnames <- tolower(firstnames)
# make data.frame
firstnames <- data.frame(firstnames)
colnames(firstnames) <- "word"
# fix contractions
chat_sessions[, Chat := gsub("won't", "will not", Chat)]
chat_sessions[, Chat := gsub("can't", "can not", Chat)]
chat_sessions[, Chat := gsub("n't", " not", Chat)]
chat_sessions[, Chat := gsub("'ll", " will", Chat)]
chat_sessions[, Chat := gsub("'re", " are", Chat)]
chat_sessions[, Chat := gsub("'ve", " have", Chat)]
chat_sessions[, Chat := gsub("'m", " am", Chat)]
chat_sessions[, Chat := gsub("'d", " would", Chat)]
chat_sessions[, Chat := gsub("'s", "", Chat)]
chat_sessions[, Chat := gsub("s'", "s", Chat)]
# remove undesirable words
chat_sessions[, Chat := gsub("has left the chat", "", Chat)]
# remove agent and visitor and punctuation
chat_sessions[, Chat := gsub("\\[Agent\\][^:]+|\\[Visitor\\][^:]+|[[:punct:]]|[[:digit:]]", "", Chat)]
# chat_sessions[grep("[']", Chat)]
chat_sessions[, Chat := gsub("comm", "", Chat, ignore.case = T)]
# change to lowercase
chat_sessions[, Chat := tolower(Chat)]
x <- fread("data/Sorted_df.csv", sep = ",")
x <- fread("data/Sorted_df.csv", sep = ",", colClasses = "character")
x <- read.csv("data/Sorted_df.csv")
x <- fread("data/Sorted_df.csv", sep = ",", quote = "")
x <- fread("data/Sorted_df.csv", sep = ",", quote = "", na.strings = "")
x <- fread("data/Sorted_df.csv", sep = ",", fill = T)
x <- fread("data/Sorted_df.csv", sep = ",", fill = T, na.strings = "")
?fread
x <- fread("data/Sorted_df.csv", sep = ",", nrow = 100)
View(x)
x <- fread("data/Sorted_df.csv", sep = ",", nrow = 100, header = T)
x <- fread("data/Sorted_df.tsv", sep = "\t", nrow = 100, header = T)
x <- fread("data/Sorted_df.tsv", sep = "\t", header = T)
View(x)
tail(x)
x[, length(unique(ConversationID))]
x <- fread("data/Sorted_df.csv", sep = ",", select = "ConversationID")
x <- fread("data/out.tsv", sep = "\t")
x <- fread("data/out.tsv", sep = "\t")
x <- fread("data/out.tsv", sep = "\t", fill = T)
x <- fread("data/out.tsv", sep = "\t", fill = T, header = T)
View(x)
