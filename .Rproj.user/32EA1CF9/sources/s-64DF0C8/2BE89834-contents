---
title: Comparison of per base coverage depth and uniformity between blood and FFPE
  tumours
author: "Eva Yap"
date: '2017-11-07'
output: 
  html_document: 
    keep_md: yes
---

## Overview

In this project, per base coverage depth and uniformity were compared between blood and FFPE tumours.

```{r global_options, include=FALSE}
knitr::opts_chunk$set(fig.width=11, fig.height=8,
                      echo=FALSE, warning=FALSE, message=FALSE)

knitr::opts_knit$set(root.dir = "../")
```

```{r Load libraries and dependencies, results='hide', warning=FALSE}
library(coin)
library(data.table)
library(GenomicRanges)
library(ggbeeswarm)
library(ggplot2)
library(mada)
library(irr)
library(psych)
library(RColorBrewer)

# load per site data
per_site <- Reduce(rbind, list(fread("./data/top_q1b20_analyzed_atgcn.tsv", sep = "\t"),
                               fread("./data/top_q1b20_extra_atgcn.tsv", sep = "\t")))

small_per_site <- unique(per_site[,.(LIB_ID, CHR, POS, TARGET, DEPTH)])
setnames(small_per_site, "LIB_ID", "Lib_ID")

# split stats 
split_stats <- fread("./data/full_TOP_split_stats.tsv", sep = "\t", colClasses = "character")
split_stats[, Count := as.numeric(Count)]

# add total read counts data
small_per_site <- merge(small_per_site, split_stats[,.(Total_Count = sum(Count)),
                                                    by = c("Lib_ID", "Stage")][Stage == "Post-Alignment"], 
                        by = "Lib_ID")


small_per_site[, Norm_Factor := Total_Count/min(Total_Count)]
small_per_site[, Norm_Depth := round(DEPTH/Norm_Factor, digits = 0)]

# calculate coverage statistics
lib <- small_per_site[, unique(Lib_ID)]

cov_stat_threshold <- function(cov_threshold, dt){
  total_sites <- nrow(unique(dt))
  if(cov_threshold == 0){
    threshold_sites <- nrow(unique(dt[Norm_Depth > cov_threshold]))
  } else {
    threshold_sites <- nrow(unique(dt[Norm_Depth >= cov_threshold]))
  }
  cov_dt <- data.table(Threshold = cov_threshold, 
                       Total_Sites = total_sites,
                       Min_Cov_Sites = threshold_sites)
  cov_dt
}

cov_threshold <- seq(0, 1000, 100)

get_cov_stats <- function(lib, dt){
  dt <- dt[Lib_ID == lib]
  dt2 <- lapply(cov_threshold, cov_stat_threshold, dt = dt)
  dt2 <- rbindlist(dt2)
  dt2[, Lib_ID := lib]
  dt2
}

cov_stat <- lapply(lib, get_cov_stats, dt = small_per_site)
cov_stat <- rbindlist(cov_stat)

# calculate percentage of sites that meet the minimum coverage
cov_stat[, Pct_Sites := round((Min_Cov_Sites/Total_Sites)*100, digits = 0)]

# merge Sample Type
metadata <- unique(fread("./data/full_TOP_double_specimens_block_age_tumour_type_ontarget_lims.tsv",
                         sep = "\t"))
cov_stat <- merge(cov_stat, metadata[,.(Lib_ID, Sample_Type)], by = "Lib_ID")
```

## Coverage uniformity

```{r Coverage Statistics, results="hide"}
# plot coverage statistics
cov_stat[, Threshold := factor(Threshold, levels = c("0", "100", "200", "300", "400", "500", "600", "700", "800", "900", "1000"))]
```

```{r Coverage Statistics plot}
ggplot(cov_stat,
       aes(x = Threshold, y = Pct_Sites, color = Sample_Type)) +
  geom_boxplot() +
  theme_bw() + scale_color_manual(name = "Specimen Type", labels = c("Blood", "FFPE Tumour"),
                    values = c(brewer.pal(11, "RdBu")[c(2,11)])) +
  theme(legend.title = element_text(size = 24, face = "bold"), 
        legend.text = element_text(size = 24), legend.position = "top",
        axis.text = element_text(size = 24),
        axis.title = element_text(size = 28,face = "bold"), 
        strip.text.y = element_text(size = 24),
        strip.text.x = element_text(size = 24)) +
  ylab("Target Bases With Minimum Coverage (%)") +
  xlab("Minimum Coverage")
```

```{r Save coverage stats, eval=FALSE}
ggsave("./plots/cov_stats_norm.png", width = 11, height = 8)
```

At each coverage threshold, the number of target bases that meet the minimum coverage is divided over the total number of target bases in the sample. Percentage of target bases that meet the minimum coverage is calculated for each sample and represented in the above figure.

### Wilcoxon signed-rank test for coverage uniformity at each threshold

```{r Wilcoxon signed-rank test cov stats, results='hide'}
wilcox_pairs <- cov_stat[,.(Lib_ID, Sample_Type, Threshold, Pct_Sites)]

wilcox_pairs <- merge(wilcox_pairs, metadata[,.(BCCA_Agency_ID, Lib_ID)], by = "Lib_ID")
wilcox_pairs <- merge(wilcox_pairs[Sample_Type == "Blood"], wilcox_pairs[Sample_Type == "FFPE Tumour"], by = c("BCCA_Agency_ID", "Threshold"))

wilcox_cov <- wilcox_pairs[Threshold != 0][, lapply(.SD, function(x) wilcox.test(x = Pct_Sites.x, y = Pct_Sites.y, paired = T, conf.int = T)), by = "Threshold", .SDcols = c("Pct_Sites.x", "Pct_Sites.y")]

wilcox_cov[, Value := rep(c("Test_statistics", "Parameter", "P_value","Null_value", "Alternative", "Method",
                            "Data_name", "Conf_int", "Estimate"), times = 10)]
```

```{r Wilcoxon signed-rank test cov stats 2}
wilcox_cov[,.(Threshold, Pct_Sites.x, Value)]
```

> Z statistics, exact p-value, and effect size

```{r Wilcox signed-rank test cov stats 3, results='hide'}
wilcox_coin <- function(threshold, dt){
  dt <- dt[Threshold == threshold]
  Blood_Pct_Sites <- dt[, Pct_Sites.x]
  Tumour_Pct_Sites <- dt[, Pct_Sites.y]
  wilcox_output <- wilcoxsign_test(Blood_Pct_Sites ~  Tumour_Pct_Sites, distribution = "exact")
  output <- data.table(Threshold=threshold, 
                       Z=statistic(wilcox_output),
                       p=pvalue(wilcox_output),
                       r=statistic(wilcox_output)/sqrt(nrow(dt)))
  output
}

pct_sites_wilcox <- lapply(cov_threshold, wilcox_coin, dt = wilcox_pairs)
pct_sites_wilcox <- rbindlist(pct_sites_wilcox)
```

```{r Wilcox signed-rank test cov stats 4}
pct_sites_wilcox
```

Exact p-values are reported for Wilcoxon signed-rank test.

### Summary statistics for each coverage threshold

```{r Coverage stats summary}
cbind(cov_stat[, summary(Pct_Sites), by = c("Threshold", "Sample_Type")],
      data.table(Parameter = rep(c("Min", "25_Quar", "Median", "Mean", "75_Quar", "Max"), times = 11)))
```

## Average per base normalized coverage

### Summary statistics for average per base normalized coverage

```{r Average per base normalized coverage, results='hide'}
avg_per_base_norm_cov <- small_per_site[, .(Mean_cov = mean(Norm_Depth)), by = "Lib_ID"]
avg_per_base_norm_cov <- merge(metadata[,.(BCCA_Agency_ID, Lib_ID, Sample_Type)], avg_per_base_norm_cov, by = "Lib_ID")

# summary statistics
cbind(avg_per_base_norm_cov[, .(Summary_stat=summary(Mean_cov)), by = "Sample_Type"], 
      data.table(Parameter = rep(c("Min", "25_Quar", "Median", "Mean", "75_Quar", "Max"), times = 2)))
```

### Wilcoxon signed-rank test

```{r Average per base normalized coverage 2}
avg_per_base_norm_cov_paired <- merge(avg_per_base_norm_cov[Sample_Type == "Blood",.(BCCA_Agency_ID, Lib_ID, Mean_cov)], avg_per_base_norm_cov[Sample_Type == "FFPE Tumour",.(BCCA_Agency_ID, Lib_ID, Mean_cov)], by = "BCCA_Agency_ID")

# wilcoxon test 
wilcox.test(x = avg_per_base_norm_cov_paired[, Mean_cov.x], 
            y = avg_per_base_norm_cov_paired[, Mean_cov.y], paired = T, conf.int = T)

wilcox_output_coin <- wilcoxsign_test(avg_per_base_norm_cov_paired[, Mean_cov.x] ~ avg_per_base_norm_cov_paired[, Mean_cov.y], distribution = "exact")

data.table(Z=statistic(wilcox_output_coin),
           p=pvalue(wilcox_output_coin),
           r=statistic(wilcox_output_coin)/sqrt(217))
```

Exact p-value is reported for Wilcoxon signed-rank test.
